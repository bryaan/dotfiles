[user]
	name = Bryan A. Rivera
	email = mail@bryaan.com
[core]
	editor = subl -n --wait
	excludesfile = /home/bryan/.gitignore_global
[alias]
    st = status
    ci = commit
    br = branch
    co = checkout
    cp = cherry-pick
[push]
    # git push will by default push all branches that have the same name on the remote.
    # Limit this behavior to just the current branch.
    default = tracking
[branch]
    # Because branch merges in git are recorded with a merge commit,
    # they are supposed to be meaningfulâ€”for example, to indicate
    # when a feature has been merged to a release branch. However,
    # during a regular daily workflow where several team members
    # sync a single branch often, the timeline gets polluted with
    # unnecessary micro-merges on regular git pull.
    # Rebasing ensures that the commits are always re-applied so
    # that the history stays linear.
    #
    # Setup rebase for every *remote* tracking branch
    autosetuprebase = remote
[commit]
    template = ~/.gitmessage
[apply]
    whitespace = fix
[color]
	ui = auto
    status = true
    branch = true
    diff = true
[diff]
    # Makes `git diff` Pretty Print submodule info.
	submodule = log
    # The Textual diff tool to use.
    # TODO this or diff-so-fancy
	tool = gvimdiff
    # Use Sublimerge as GUI Diff Tool
	guitool = sublimerge
[merge]
    # Use Sublimerge as Merge Tool
	tool = sublimerge
    # Use 3 way merge
	conflictstyle = diff3
[difftool "sublimerge"]
	cmd = subl -n --wait \"$REMOTE\" \"$LOCAL\" --command \"sublimerge_diff_views {\\\"left_read_only\\\": true, \\\"right_read_only\\\": true}
[mergetool "sublimerge"]
	cmd = subl -n --wait \"$REMOTE\" \"$BASE\" \"$LOCAL\" \"$MERGED\" --command \"sublimerge_diff_views\"
